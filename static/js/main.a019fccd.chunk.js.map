{"version":3,"sources":["assets/logo-image.png","app/AppStyles.js","tiles/TileStyles.js","ThemeContext.js","utils/getRandomColors.js","utils/getColorHue.js","tiles/Tiles.js","utils/getRandomSize.js","app/App.js","utils/getTileSizes.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Portfolio","styled","_ref","isDarkMode","textAlign","padding","minHeight","transition","color","backgroundColor","Header","display","justifyContent","alignItems","Content","flexWrap","alignContent","gap","opacity","TitleContainer","LogoContainer","objectFit","height","width","borderRadius","Title","marginLeft","fontSize","fontWeight","cursor","ThemeIconContainer","Tile","position","flexDirection","perspective","transformStyle","maxWidth","boxShadow","TileName","whiteSpace","overflow","textOverflow","overflowWrap","TileContent","WebkitLineClamp","WebkitBoxOrient","FlippedTile","IconContainer","ThemeContext","createContext","getRandomColors","previousColor","newHue","ctx","document","createElement","getContext","fillStyle","fillRect","_data$slice","getImageData","data","slice","_data$slice2","_slicedToArray","r","g","b","max","Math","min","hue","delta","getColorHue","getRandomInt","newSaturation","floor","random","newLightness","concat","getOriginalColor","i","Tiles","tileName","content","isSquare","shuffleColors","useContext","_useState","useState","_useState2","isFlipped","setIsFlipped","tileStyle","--tile-color","--text-color","tileSize","React","style","onClick","type","href","url","src","iconSrc","alt","iconAlt","App","setIsDarkMode","_useState3","_useState4","areTilesVisible","setAreTilesVisible","_useState5","_useState6","tileColors","setTileColors","_useState7","_useState8","tileSizes","setTileSizes","useEffect","sizes","tiles","forEach","tile","index","size","getTileSizes","shuffledColors","map","_toConsumableArray","Provider","LogoImage","Moon","Sun","key","reportWebVitals","onPerfEntry","Function","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a019fccd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-image.797b2677.png\";","import { styled } from \"@mui/material\";\r\n\r\nexport const Portfolio = styled(\"div\")(({ isDarkMode }) => ({\r\n  textAlign: \"center\",\r\n  padding: \"20px\",\r\n  minHeight: \"100vh\",\r\n  transition: \"background-color 0.3s\",\r\n  color: !isDarkMode ? \"black\" : \"white\",\r\n  backgroundColor: isDarkMode ? \"black\" : \"white\",\r\n}));\r\n\r\nexport const Header = styled(\"div\")(() => ({\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n}));\r\n\r\nexport const Content = styled(\"div\")(() => ({\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n  justifyContent: \"space-between\",\r\n  alignContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  gap: \"10px\",\r\n  opacity: 1,\r\n  transition: \"opacity 0.5s\",\r\n  padding: \"20px\",\r\n}));\r\n\r\nexport const TitleContainer = styled(\"div\")(() => ({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n}));\r\n\r\nexport const LogoContainer = styled(\"img\")(() => ({\r\n  display: \"block\",\r\n  objectFit: \"contain\",\r\n  height: \"40px\",\r\n  width: \"40px\",\r\n  borderRadius: \"5px\",\r\n}));\r\n\r\nexport const Title = styled(\"span\")(() => ({\r\n  marginLeft: \"20px\",\r\n  fontSize: \"30px\",\r\n  fontWeight: \"bold\",\r\n  cursor: \"pointer\",\r\n}));\r\n\r\nexport const ThemeIconContainer = styled(\"span\")(() => ({\r\n  display: \"block\",\r\n  objectFit: \"contain\",\r\n  height: \"30px\",\r\n  width: \"30px\",\r\n  cursor: \"pointer\",\r\n}));\r\n","import { styled } from \"@mui/material\";\r\n\r\nexport const Tile = styled(\"div\")(({ isDarkMode }) => ({\r\n  position: \"relative\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  backgroundColor: \"var(--tile-color)\",\r\n  padding: \"10px\",\r\n  width: \"var(--tile-width)\",\r\n  height: \"var(--tile-height)\",\r\n  cursor: \"pointer\",\r\n  perspective: \"1000px\",\r\n  transformStyle: \"preserve-3d\",\r\n  textAlign: \"center\",\r\n  maxWidth: \"30vw\",\r\n  borderRadius: \"5PX\",\r\n  boxShadow: isDarkMode ? \"\" : \"5px 5px 5px #111111\",\r\n}));\r\n\r\nexport const TileName = styled(\"div\")(() => ({\r\n  fontSize: \"24px\",\r\n  color: \"var(--text-color)\",\r\n  fontWeight: \"bold\",\r\n  whiteSpace: \"normal\" /* Allow multiline text */,\r\n  overflow: \"hidden\" /* Hide overflowing content */,\r\n  textOverflow: \"ellipsis\" /* Add ellipsis for very long content */,\r\n  overflowWrap: \"anywhere\",\r\n}));\r\n\r\nexport const TileContent = styled(\"div\")(() => ({\r\n  fontWeight: \"lighter\",\r\n  fontSize: \"18px\",\r\n  color: \"var(--text-color)\",\r\n  whiteSpace: \"normal\" /* Allow multiline text */,\r\n  overflow: \"hidden\" /* Hide overflowing content */,\r\n  textOverflow: \"ellipsis\" /* Add ellipsis for very long content */,\r\n  WebkitLineClamp: 4 /* Number of lines to show */,\r\n  WebkitBoxOrient: \"vertical\",\r\n}));\r\n\r\nexport const FlippedTile = styled(\"img\")(() => ({\r\n  height: \"100%\",\r\n  width: \"100%\",\r\n}));\r\n\r\nexport const IconContainer = styled(\"div\")(() => ({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n}));\r\n","import { createContext } from \"react\";\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport { ThemeContext };\r\n","import { getColorHue } from \"./getColorHue.js\";\r\n\r\nexport const getRandomColors = () => {\r\n  let color = \"\";\r\n  let previousColor = null;\r\n  let lowestSaturation = 50;\r\n  let highestSaturation = 100;\r\n  let lowestLightness = 30;\r\n  let highestLightness = 60;\r\n\r\n  if (previousColor) {\r\n    const prevHue = getColorHue(previousColor);\r\n    const newHue = (prevHue + getRandomInt(10, 40)) % 360;\r\n    const newSaturation =\r\n      Math.floor(Math.random() * (highestSaturation - lowestSaturation + 1)) +\r\n      lowestSaturation;\r\n    const newLightness =\r\n      Math.floor(Math.random() * (highestLightness - lowestLightness + 1)) +\r\n      lowestLightness;\r\n    color = `hsl(${newHue}, ${newSaturation}%, ${newLightness}%)`;\r\n  } else {\r\n    color = getOriginalColor();\r\n  }\r\n  previousColor = color;\r\n\r\n  return color;\r\n};\r\n\r\nconst getRandomInt = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst getOriginalColor = () => {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n\r\n  return color;\r\n};\r\n","export const getColorHue = (color) => {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const ctx = canvas.getContext(\"2d\");\r\n  ctx.fillStyle = color;\r\n  ctx.fillRect(0, 0, 1, 1);\r\n  const data = ctx.getImageData(0, 0, 1, 1).data;\r\n  const [r, g, b] = data.slice(0, 3);\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  let hue = 0;\r\n  if (max === min) {\r\n    hue = 0;\r\n  } else {\r\n    const delta = max - min;\r\n    switch (max) {\r\n      case r:\r\n        hue = ((g - b) / delta) % 6;\r\n        break;\r\n      case g:\r\n        hue = (b - r) / delta + 2;\r\n        break;\r\n      case b:\r\n        hue = (r - g) / delta + 4;\r\n        break;\r\n    }\r\n    hue *= 60;\r\n    if (hue < 0) {\r\n      hue += 360;\r\n    }\r\n  }\r\n  return hue;\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport {\r\n  TileName,\r\n  IconContainer,\r\n  FlippedTile,\r\n  TileContent,\r\n  Tile,\r\n} from \"./TileStyles\";\r\nimport { ThemeContext } from \"../ThemeContext\";\r\nimport { getRandomSize } from \"../utils\";\r\n\r\nexport const Tiles = ({\r\n  tileName,\r\n  content,\r\n  isSquare,\r\n  color,\r\n  shuffleColors,\r\n}) => {\r\n  const isDarkMode = useContext(ThemeContext);\r\n  const [isFlipped, setIsFlipped] = useState(false);\r\n\r\n  const tileStyle = {\r\n    \"--tile-color\": color,\r\n    \"--text-color\": isDarkMode ? \"white\" : \"black\",\r\n  };\r\n\r\n  const tileSize = `${getRandomSize()}px`;\r\n\r\n  if (isSquare) {\r\n    tileStyle[\"--tile-width\"] = tileSize;\r\n    tileStyle[\"--tile-height\"] = tileSize;\r\n  } else {\r\n    tileStyle[\"--tile-width\"] = \"400px\";\r\n    tileStyle[\"--tile-height\"] = tileSize;\r\n  }\r\n\r\n  const handleClick = () => {\r\n    if (tileName === \"Color Shuffle\") {\r\n      shuffleColors(); // Call the shuffleColors function passed from App.js\r\n    } else {\r\n      setIsFlipped(!isFlipped);\r\n    }\r\n  };\r\n\r\n  const renderContent = () => {\r\n    if (content.type === \"iconLink\") {\r\n      return (\r\n        <a href={content.url}>\r\n          <IconContainer>\r\n            {!isFlipped ? (\r\n              <FlippedTile src={content.iconSrc} alt={content.iconAlt} />\r\n            ) : (\r\n              <Tile />\r\n            )}\r\n          </IconContainer>\r\n        </a>\r\n      );\r\n    } else {\r\n      return <TileContent>{content}</TileContent>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Tile style={tileStyle} onClick={handleClick}>\r\n      <TileName>\r\n        {isFlipped ? <TileName>{tileName}</TileName> : renderContent()}\r\n      </TileName>\r\n    </Tile>\r\n  );\r\n};\r\n","export const getRandomSize = () => {\r\n  const minSize = 50;\r\n  const maxSize = 200;\r\n  const num = Math.floor(Math.random() * (maxSize - minSize + 1) + minSize);\r\n  return num;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Sun, Moon } from \"react-feather\";\r\nimport {\r\n  Portfolio,\r\n  Header,\r\n  Content,\r\n  TitleContainer,\r\n  LogoContainer,\r\n  ThemeIconContainer,\r\n  Title,\r\n} from \"./AppStyles\";\r\nimport { LogoImage } from \"../assets\";\r\nimport data from \"../data.json\";\r\nimport { Tiles } from \"../tiles\";\r\nimport { ThemeContext } from \"../ThemeContext\";\r\nimport { getTileSizes, getRandomColors } from \"../utils\";\r\n\r\nexport const App = () => {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [areTilesVisible, setAreTilesVisible] = useState(true);\r\n  const [tileColors, setTileColors] = useState([]);\r\n  const [tileSizes, setTileSizes] = useState({});\r\n\r\n  useEffect(() => {\r\n    setTileSizes(getTileSizes());\r\n  }, [areTilesVisible]);\r\n\r\n  const handleTitleClick = () => {\r\n    setAreTilesVisible(!areTilesVisible); // Toggle the visibility of tiles\r\n  };\r\n\r\n  const shuffleColors = () => {\r\n    let shuffledColors;\r\n    shuffledColors = data.tiles.map(() => getRandomColors());\r\n    setTileColors([...shuffledColors]);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider>\r\n      <Portfolio isDarkMode={isDarkMode}>\r\n        <Header>\r\n          <TitleContainer>\r\n            <LogoContainer src={LogoImage} alt=\"Logo image\" />\r\n            <Title onClick={handleTitleClick}>Tejas Kothari</Title>\r\n          </TitleContainer>\r\n          <ThemeIconContainer onClick={() => setIsDarkMode(!isDarkMode)}>\r\n            {isDarkMode ? <Moon color=\"#D3D3D3\" /> : <Sun color=\"#E8A317\" />}\r\n          </ThemeIconContainer>\r\n        </Header>\r\n        <Content>\r\n          {areTilesVisible &&\r\n            data.tiles.map((tile, index) => (\r\n              <Tiles\r\n                key={index}\r\n                tileName={tile.tileName}\r\n                content={tile.content}\r\n                isSquare={tile.isSquare}\r\n                color={tileColors[index] || tile.color} // Use the shuffled color if available\r\n                shuffleColors={shuffleColors} // Pass the shuffleColors function\r\n                tileSize={tileSizes[index]}\r\n              />\r\n            ))}\r\n        </Content>\r\n      </Portfolio>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n","import data from \"../data.json\";\r\n\r\nexport const getTileSizes = () => {\r\n  const minSize = 50;\r\n  const maxSize = 200;\r\n  const sizes = {};\r\n  data.tiles.forEach((tile, index) => {\r\n    const size = Math.floor(Math.random() * (maxSize - minSize + 1) + minSize);\r\n    sizes[index] = `${size}px`;\r\n  });\r\n  return sizes;\r\n};\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./index.css\";\r\nimport { App } from \"./app\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}