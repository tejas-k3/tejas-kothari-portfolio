{"version":3,"sources":["assets/logo-image.png","app/AppStyles.js","tiles/TileStyles.js","ThemeContext.js","utils/getRandomSize.js","utils/getRandomColors.js","utils/getColorHue.js","tiles/Tiles.js","app/App.js","utils/getTileSizes.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Portfolio","styled","_ref","isDarkMode","textAlign","padding","minHeight","transition","color","backgroundColor","Header","display","justifyContent","alignItems","Content","flexWrap","alignContent","gap","opacity","TitleContainer","LogoContainer","objectFit","height","width","borderRadius","Title","marginLeft","fontSize","fontWeight","cursor","ThemeIconContainer","Tile","position","flexDirection","perspective","transformStyle","maxWidth","boxShadow","animation","isAnimating","@keyframes rotation","0%","transform","100%","TileName","whiteSpace","overflow","textOverflow","overflowWrap","TileContent","WebkitLineClamp","WebkitBoxOrient","FlippedTile","_ref2","IconContainer","_ref3","ThemeContext","createContext","getRandomSize","Math","floor","random","getRandomColors","previousColor","newHue","ctx","document","createElement","getContext","fillStyle","fillRect","_data$slice","getImageData","data","slice","_data$slice2","_slicedToArray","r","g","b","max","min","hue","delta","getColorHue","getRandomInt","newSaturation","newLightness","concat","getOriginalColor","i","Tiles","tileName","content","isSquare","shuffleColors","flipped","useContext","_useState","useState","_useState2","isFlipped","setIsFlipped","_useState3","_useState4","setIsAnimating","_useState5","_useState6","tileSize","setTileSize","tileStyle","--tile-color","--text-color","handleLinkClick","setTimeout","window","open","url","React","style","onClick","type","src","iconSrc","alt","iconAlt","App","setIsDarkMode","areTilesVisible","setAreTilesVisible","tileColors","setTileColors","_useState7","_useState8","tileSizes","setTileSizes","useEffect","sizes","tiles","forEach","tile","index","size","getTileSizes","shuffledColors","map","_toConsumableArray","Provider","value","LogoImage","Moon","Sun","key","reportWebVitals","onPerfEntry","Function","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.90b4c19a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-image.797b2677.png\";","import { styled } from \"@mui/material\";\r\n\r\nexport const Portfolio = styled(\"div\")(({ isDarkMode }) => ({\r\n  textAlign: \"center\",\r\n  padding: \"20px\",\r\n  minHeight: \"100vh\",\r\n  transition: \"background-color 0.3s\",\r\n  color: !isDarkMode ? \"black\" : \"white\",\r\n  backgroundColor: isDarkMode ? \"black\" : \"white\",\r\n}));\r\n\r\nexport const Header = styled(\"div\")(() => ({\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n}));\r\n\r\nexport const Content = styled(\"div\")(() => ({\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n  justifyContent: \"space-between\",\r\n  alignContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  gap: \"10px\",\r\n  opacity: 1,\r\n  transition: \"opacity 0.5s\",\r\n  padding: \"20px\",\r\n}));\r\n\r\nexport const TitleContainer = styled(\"div\")(() => ({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n}));\r\n\r\nexport const LogoContainer = styled(\"img\")(() => ({\r\n  display: \"block\",\r\n  objectFit: \"contain\",\r\n  height: \"40px\",\r\n  width: \"40px\",\r\n  borderRadius: \"5px\",\r\n}));\r\n\r\nexport const Title = styled(\"span\")(() => ({\r\n  marginLeft: \"20px\",\r\n  fontSize: \"30px\",\r\n  fontWeight: \"bold\",\r\n  cursor: \"pointer\",\r\n}));\r\n\r\nexport const ThemeIconContainer = styled(\"span\")(() => ({\r\n  display: \"block\",\r\n  objectFit: \"contain\",\r\n  height: \"30px\",\r\n  width: \"30px\",\r\n  cursor: \"pointer\",\r\n}));\r\n","import { styled } from \"@mui/material\";\r\n\r\nexport const Tile = styled(\"div\")(({ isDarkMode, isAnimating }) => ({\r\n  position: \"relative\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  backgroundColor: \"var(--tile-color)\",\r\n  padding: \"10px\",\r\n  width: \"var(--tile-width)\",\r\n  height: \"var(--tile-height)\",\r\n  cursor: \"pointer\",\r\n  perspective: \"1000px\",\r\n  transformStyle: \"preserve-3d\",\r\n  textAlign: \"center\",\r\n  maxWidth: \"30vw\",\r\n  borderRadius: \"5PX\",\r\n  boxShadow: isDarkMode ? \"\" : \"5px 5px 5px #111111\",\r\n  animation: isAnimating ? \"rotation 0.4s forwards\" : \"none\",\r\n  transition:\r\n    \"background-color 0.2s ease, box-shadow 0.2s ease, width 0.2s ease 0.2s, height 0.2s ease 0.2s\",\r\n  \"@keyframes rotation\": {\r\n    \"0%\": {\r\n      transform: \"rotateY(0deg)\",\r\n    },\r\n    \"100%\": {\r\n      transform: \"rotateY(360deg)\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport const TileName = styled(\"div\")(() => ({\r\n  fontSize: \"24px\",\r\n  color: \"var(--text-color)\",\r\n  fontWeight: \"bold\",\r\n  whiteSpace: \"normal\" /* Allow multiline text */,\r\n  overflow: \"hidden\" /* Hide overflowing content */,\r\n  textOverflow: \"ellipsis\" /* Add ellipsis for very long content */,\r\n  overflowWrap: \"anywhere\",\r\n}));\r\n\r\nexport const TileContent = styled(\"div\")(() => ({\r\n  fontWeight: \"lighter\",\r\n  fontSize: \"18px\",\r\n  color: \"var(--text-color)\",\r\n  whiteSpace: \"normal\" /* Allow multiline text */,\r\n  overflow: \"hidden\" /* Hide overflowing content */,\r\n  textOverflow: \"ellipsis\" /* Add ellipsis for very long content */,\r\n  WebkitLineClamp: 4 /* Number of lines to show */,\r\n  WebkitBoxOrient: \"vertical\",\r\n}));\r\n\r\nexport const FlippedTile = styled(\"img\")(({ isAnimating }) => ({\r\n  height: \"100%\",\r\n  width: \"100%\",\r\n}));\r\n\r\nexport const IconContainer = styled(\"div\")(({ isAnimating }) => ({\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n  animation: isAnimating ? \"rotation 0.4s forwards\" : \"none\",\r\n  transition:\r\n    \"background-color 0.2s ease, box-shadow 0.2s ease, width 0.2s ease 0.2s, height 0.2s ease 0.2s\",\r\n  \"@keyframes rotation\": {\r\n    \"0%\": {\r\n      transform: \"rotateY(0deg)\",\r\n    },\r\n    \"100%\": {\r\n      transform: \"rotateY(360deg)\",\r\n    },\r\n  },\r\n}));\r\n","import { createContext } from \"react\";\r\n\r\nconst ThemeContext = createContext();\r\n\r\nexport { ThemeContext };\r\n","export const getRandomSize = () => {\r\n  const minSize = 50;\r\n  const maxSize = 200;\r\n  const num = Math.floor(Math.random() * (maxSize - minSize + 1) + minSize);\r\n  return num;\r\n};\r\n","import { getColorHue } from \"./getColorHue.js\";\r\n\r\nexport const getRandomColors = () => {\r\n  let color = \"\";\r\n  let previousColor = null;\r\n  let lowestSaturation = 50;\r\n  let highestSaturation = 100;\r\n  let lowestLightness = 30;\r\n  let highestLightness = 60;\r\n\r\n  if (previousColor) {\r\n    const prevHue = getColorHue(previousColor);\r\n    const newHue = (prevHue + getRandomInt(10, 40)) % 360;\r\n    const newSaturation =\r\n      Math.floor(Math.random() * (highestSaturation - lowestSaturation + 1)) +\r\n      lowestSaturation;\r\n    const newLightness =\r\n      Math.floor(Math.random() * (highestLightness - lowestLightness + 1)) +\r\n      lowestLightness;\r\n    color = `hsl(${newHue}, ${newSaturation}%, ${newLightness}%)`;\r\n  } else {\r\n    color = getOriginalColor();\r\n  }\r\n  previousColor = color;\r\n\r\n  return color;\r\n};\r\n\r\nconst getRandomInt = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst getOriginalColor = () => {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n\r\n  return color;\r\n};\r\n","export const getColorHue = (color) => {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const ctx = canvas.getContext(\"2d\");\r\n  ctx.fillStyle = color;\r\n  ctx.fillRect(0, 0, 1, 1);\r\n  const data = ctx.getImageData(0, 0, 1, 1).data;\r\n  const [r, g, b] = data.slice(0, 3);\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  let hue = 0;\r\n  if (max === min) {\r\n    hue = 0;\r\n  } else {\r\n    const delta = max - min;\r\n    switch (max) {\r\n      case r:\r\n        hue = ((g - b) / delta) % 6;\r\n        break;\r\n      case g:\r\n        hue = (b - r) / delta + 2;\r\n        break;\r\n      case b:\r\n        hue = (r - g) / delta + 4;\r\n        break;\r\n      default:\r\n        hue = 0; // Handle unmatched cases\r\n        break;\r\n    }\r\n    hue *= 60;\r\n    if (hue < 0) {\r\n      hue += 360;\r\n    }\r\n  }\r\n  return hue;\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport {\r\n  TileName,\r\n  IconContainer,\r\n  FlippedTile,\r\n  TileContent,\r\n  Tile,\r\n} from \"./TileStyles\";\r\nimport { ThemeContext } from \"../ThemeContext\";\r\nimport { getRandomSize } from \"../utils\";\r\n\r\nexport const Tiles = ({\r\n  tileName,\r\n  content,\r\n  isSquare,\r\n  color,\r\n  shuffleColors,\r\n  flipped,\r\n}) => {\r\n  const isDarkMode = useContext(ThemeContext);\r\n  const [isFlipped, setIsFlipped] = useState(flipped);\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [tileSize, setTileSize] = useState(`${getRandomSize()}px`);\r\n\r\n  const tileStyle = {\r\n    \"--tile-color\": color,\r\n    \"--text-color\": isDarkMode ? \"white\" : \"black\",\r\n  };\r\n\r\n  if (isSquare) {\r\n    tileStyle[\"--tile-width\"] = tileSize;\r\n    tileStyle[\"--tile-height\"] = tileSize;\r\n  } else {\r\n    tileStyle[\"--tile-width\"] = \"400px\";\r\n    tileStyle[\"--tile-height\"] = tileSize;\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setTileSize(`${getRandomSize()}px`);\r\n    setIsAnimating(true);\r\n\r\n    setTimeout(() => {\r\n      setIsAnimating(false);\r\n      if (tileName === \"Color Shuffle\") {\r\n        shuffleColors();\r\n      }\r\n    }, 300);\r\n\r\n    if(tileName !== \"Color Shuffle\")\r\n      setIsFlipped(!isFlipped);\r\n  };\r\n\r\n  const handleLinkClick = () => {\r\n    setTimeout(() => {\r\n      window.open(content.url, \"_blank\");\r\n    }, 500);\r\n  };\r\n\r\n  const renderContent = () => {\r\n    if (content.type === \"iconLink\") {\r\n      return (\r\n        <IconContainer isAnimating={isAnimating} onClick={handleLinkClick}>\r\n          {!isFlipped ? (\r\n            <FlippedTile src={content.iconSrc} alt={content.iconAlt} />\r\n          ) : (\r\n            <Tile />\r\n          )}\r\n        </IconContainer>\r\n      );\r\n    } else {\r\n      return <TileContent>{content}</TileContent>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Tile\r\n      style={tileStyle}\r\n      isAnimating={isAnimating}\r\n      tileSize={tileSize}\r\n      onClick={handleClick}\r\n    >\r\n      <TileName>{isFlipped ? tileName : renderContent()}</TileName>\r\n    </Tile>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Sun, Moon } from \"react-feather\";\r\nimport {\r\n  Portfolio,\r\n  Header,\r\n  Content,\r\n  TitleContainer,\r\n  LogoContainer,\r\n  ThemeIconContainer,\r\n  Title,\r\n} from \"./AppStyles\";\r\nimport { LogoImage } from \"../assets\";\r\nimport data from \"../data.json\";\r\nimport { Tiles } from \"../tiles\";\r\nimport { ThemeContext } from \"../ThemeContext\";\r\nimport { getTileSizes, getRandomColors } from \"../utils\";\r\n\r\nexport const App = () => {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [areTilesVisible, setAreTilesVisible] = useState(true);\r\n  const [tileColors, setTileColors] = useState([]);\r\n  const [tileSizes, setTileSizes] = useState({});\r\n\r\n  useEffect(() => {\r\n    setTileSizes(getTileSizes());\r\n  }, [areTilesVisible]);\r\n\r\n  const handleTitleClick = () => {\r\n    setAreTilesVisible(!areTilesVisible); // Toggle the visibility of tiles\r\n  };\r\n\r\n  const shuffleColors = () => {\r\n    let shuffledColors;\r\n    shuffledColors = data.tiles.map(() => getRandomColors());\r\n    setTileColors([...shuffledColors]);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={isDarkMode}>\r\n      <Portfolio isDarkMode={isDarkMode}>\r\n        <Header>\r\n          <TitleContainer>\r\n            <LogoContainer src={LogoImage} alt=\"Logo image\" />\r\n            <Title onClick={handleTitleClick}>Tejas Kothari</Title>\r\n          </TitleContainer>\r\n          <ThemeIconContainer onClick={() => setIsDarkMode(!isDarkMode)}>\r\n            {isDarkMode ? <Moon color=\"#D3D3D3\" /> : <Sun color=\"#E8A317\" />}\r\n          </ThemeIconContainer>\r\n        </Header>\r\n        <Content>\r\n          {areTilesVisible &&\r\n            data.tiles.map((tile, index) => (\r\n              <Tiles\r\n                key={index}\r\n                tileName={tile.tileName}\r\n                content={tile.content}\r\n                isSquare={tile.isSquare}\r\n                color={tileColors[index] || tile.color} // Use the shuffled color if available\r\n                shuffleColors={shuffleColors} // Pass the shuffleColors function\r\n                tileSize={tileSizes[index]}\r\n                flipped={tile.flipped}\r\n              />\r\n            ))}\r\n        </Content>\r\n      </Portfolio>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n","import data from \"../data.json\";\r\n\r\nexport const getTileSizes = () => {\r\n  const minSize = 50;\r\n  const maxSize = 200;\r\n  const sizes = {};\r\n  data.tiles.forEach((tile, index) => {\r\n    const size = Math.floor(Math.random() * (maxSize - minSize + 1) + minSize);\r\n    sizes[index] = `${size}px`;\r\n  });\r\n  return sizes;\r\n};\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./index.css\";\r\nimport { App } from \"./app\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}