{"version":3,"sources":["styles/AppStyles.js","Tile.js","App.js","reportWebVitals.js","index.js","assets/logo-image.png"],"names":["Portfolio","textAlign","padding","minHeight","transition","color","backgroundColor","Header","display","justifyContent","alignItems","Content","gridTemplateColumns","justifyItems","maxWidth","TitleContainer","IconContainer","objectFit","height","width","Title","marginLeft","fontSize","fontWeight","Tile","_ref","tileName","content","isSquare","shuffleColors","isDarkMode","useContext","ThemeContext","_useState","useState","_useState2","_slicedToArray","isFlipped","setIsFlipped","tileStyle","--tile-color","--text-color","tileSize","concat","Math","floor","random","tileClass","React","createElement","className","style","onClick","type","href","url","src","iconSrc","alt","iconAlt","createContext","App","setIsDarkMode","_useState3","_useState4","areTilesVisible","setAreTilesVisible","_useState5","_useState6","tileColors","setTileColors","_useState7","_useState8","tileSizes","setTileSizes","useEffect","sizes","data","tiles","forEach","tile","index","size","generateTileSizes","shuffledColors","map","getRandomColor","i","Provider","value","LogoImage","Moon","Sun","key","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports","p"],"mappings":"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","file":"static/js/main.eea2a015.chunk.js","sourcesContent":["export const Portfolio = (()=>({\n  textAlign: 'center',\n  padding: '20px',\n  minHeight: '100vh',\n  transition: 'background-color 0.3s',\n  color: 'Black',\n  backgroundColor: 'black',\n}));\n\nexport const Header = (()=>({\n  display: 'flex',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n  padding: '20px',\n}));\n\nexport const Content = (()=>({\n  display: 'grid',\n  gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',\n  justifyItems: 'center',\n  alignItems: 'center',\n  padding: '20px',\n  maxWidth: '100%',\n}));\n\nexport const TitleContainer = (()=>({\n  display: 'flex',\n  alignItems: 'center',\n}));\n\nexport const IconContainer = (()=>({\n  display: 'block',\n  objectFit: 'contain',\n  height: '40px', \n  width: '40px'\n}));\n\nexport const Title = (()=>({\n  marginLeft: '20px',\n  fontSize: '30px',\n  fontWeight: 'bold',\n}));","import React, { useContext, useState } from 'react';\nimport './Tile.css';\nimport { ThemeContext } from './App';\n\nconst Tile = ({ tileName, content, isSquare, color, shuffleColors }) => {\n  const isDarkMode = useContext(ThemeContext);\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const getRandomSize = () => {\n    const minSize = 50;\n    const maxSize = 200;\n    const num = Math.floor(Math.random() * (maxSize - minSize + 1) + minSize);\n    return num;\n  };\n\n  const tileStyle = {\n    '--tile-color': color,\n    '--text-color': isDarkMode ? 'white' : 'black',\n  };\n\n  const tileSize = `${getRandomSize()}px`;\n  if (isSquare) {\n    tileStyle['--tile-width'] = tileSize;\n    tileStyle['--tile-height'] = tileSize;\n  } else {\n    tileStyle['--tile-width'] = '400px';\n    tileStyle['--tile-height'] = tileSize;\n  }\n\n  const handleClick = () => {\n    if (tileName === 'Color Shuffle') {\n      shuffleColors(); // Call the shuffleColors function passed from App.js\n    } else {\n      setIsFlipped(!isFlipped);\n    }\n  };\n  const renderContent = () => {\n    if (content.type === 'iconLink') {\n      return (\n        <a href={content.url}>\n          <div\n            className=\"icon-container\"\n            style={{\n              width: '100%',\n              height: '100%',\n            }}\n          >\n            <img\n              src={content.iconSrc}\n              alt={content.iconAlt}\n              className={`icon ${isFlipped ? 'flipped' : ''}`}\n            />\n          </div>\n        </a>\n      );\n    } else {\n      return <div className=\"tile-content\">{content}</div>;\n    }\n  };\n\n  const tileClass = `tile ${isFlipped ? '' : 'flipped'}`;\n\n  return (\n    <div className={tileClass} style={tileStyle} onClick={handleClick}>\n        <div className=\"tile-name\">\n        {isFlipped ? <div className=\"tile-name\">{tileName}</div> : renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default Tile;\n","import React, { useState, createContext, useEffect } from 'react';\nimport { Sun, Moon } from 'react-feather';\nimport { Portfolio, Header, Content, TitleContainer, IconContainer, Title } from './styles/index';\nimport { LogoImage } from './assets';\nimport Tile from './Tile';\nimport data from './data.json';\n\nconst ThemeContext = createContext();\n\nconst App = () => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [areTilesVisible, setAreTilesVisible] = useState(true);\n  const [tileColors, setTileColors] = useState([]);\n  const [tileSizes, setTileSizes] = useState({});\n\n  const generateTileSizes = () => {\n    const minSize = 50;\n    const maxSize = 200;\n    const sizes = {};\n    data.tiles.forEach((tile, index) => {\n      const size = Math.floor(Math.random() * (maxSize - minSize + 1) + minSize);\n      sizes[index] = `${size}px`;\n    });\n    return sizes;\n  };\n\n  useEffect(() => {\n    setTileSizes(generateTileSizes());\n  }, [areTilesVisible]);\n\n  const handleTitleClick = () => {\n    setAreTilesVisible(!areTilesVisible); // Toggle the visibility of tiles\n  };\n\n  const shuffleColors = () => {\n    const shuffledColors = data.tiles.map(() => getRandomColor());\n    setTileColors(shuffledColors);\n  };\n  \n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n\n  return (\n    <ThemeContext.Provider value={isDarkMode}>\n      <Portfolio>\n        <Header>\n          <TitleContainer>\n            <IconContainer src={ LogoImage } alt='Logo image' />\n            <Title onClick={handleTitleClick}>\n              Tejas Kothari\n            </Title>\n            {/* Wrap Tejas Kothari in a span */}\n          </TitleContainer>\n            {isDarkMode ? <Moon size='30px' color=\"#D3D3D3\" onClick={() => setIsDarkMode(!isDarkMode)} /> : <Sun size='30px' color=\"#E8A317\" />}\n        </Header>\n        <Content>\n          {areTilesVisible &&\n            data.tiles.map((tile, index) => (\n              <Tile\n                key={index}\n                tileName={tile.tileName}\n                content={tile.content}\n                isSquare={tile.isSquare}\n                color={tileColors[index] || tile.color} // Use the shuffled color if available\n                shuffleColors={shuffleColors} // Pass the shuffleColors function\n                tileSize={tileSizes[index]}\n              />\n            ))}\n        </Content>\n      </Portfolio>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\nexport { ThemeContext };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/logo-image.797b2677.png\";"],"sourceRoot":""}